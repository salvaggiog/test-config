server:
   port: 8087

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
    hostname: localhost
    port: 8899
    contextPath: userauth

# Note that the "/user" endpoint needs to provide the principle of the logged in user (/me endpoint)
spring:
  oauth2:
    resource: 
      userInfoUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/me
      preferTokenInfo: false 
    client:
      accessTokenUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token
      userAuthorizationUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/authorize
      clientId: clientapp
      
---

mongo: 
  database: dominus
  host: localhost
  password:
  port: 27017
  username:

# Datasource and JPA configuration to be used for storing the OAuth authorization details 
# and token store
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/core_indiana_oauth2
    username: root
    password: pgi1979
    driver-class: com.mysql.jdbc.Driver
  
  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    show-sql: true
    hibernate:
      ddl-auto: update
