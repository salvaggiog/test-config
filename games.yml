server:
   port: 8086
   contextPath: /games

eureka:
  instance:
      preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://10.3.1.187:8761/eureka/


# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
    hostname: localhost
    port: 8899
    contextPath: userauth

# Note that the "/user" endpoint needs to provide the principle of the logged in user (/me endpoint)
spring:
  oauth2:
    resource: 
      userInfoUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/me
      preferTokenInfo: false
    client:
      accessTokenUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token
      userAuthorizationUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/authorize
      clientId: clientapp
---

# Datasource and JPA configuration to be used for storing the OAuth authorization details 
# and token store
spring:
  datasource:
    url: jdbc:mysql://10.3.2.212:3306/core_indiana_oauth2
    username: testuser
    password: test13!Wkv
    driver-class: com.mysql.jdbc.Driver
    testOnBorrow: true
    validationQuery: SELECT 1
    
  jpa:
    database-platform: org.hibernate.dialect.MySQL5Dialect
    show-sql: true
    entitymanager-packagesToScan: com.microservice.mysql
    hibernate:
      ddl-auto: none
      useUnicode: true
      characterEncoding: utf8_bin
      charSet: UTF-8
      autoReconnect: true
      autoReconnectForPools: true
      c3p0:
         acquire_increment: 3
         max_size: 200
         min_size: 3
         maxIdleTime: 120
         unreturned_connection_timeout: 150
         timeout: 180
         maxConnectionAge: 120
         idle_test_period: 10
         maxStatements: 0
