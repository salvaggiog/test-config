# Define the port where the API gateway server would be running
server:
  port: 8080

# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
    hostname: 10.3.1.187
    port: 8899
    contextPath: userauth
    
# Define the routes which determine what URL are serviced by what applications.
# The application/services are defined in the bootstrap.yml file of individual applications
# using the spring.application.name property.

# Note that we don't proxy the calls to the authorization server. The reason being that 
# Spring cloud security would need to secure the api gateway before it can route the 
# requests using zuul
zuul:
  routes:
    bonus-server: /bonus/**
    common: 
      path: /common/**
      url: http://localhost:8085/common
    games: /games/**
    gofiliate: /gofiliate/**
    seamless-gameart: /seamless-gameart/**
    user: 
      path: /userauth/**
      stripPrefix: true
      url: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}
# Define the Eureka server that handles service registration
eureka:
  client:
    serviceUrl:
      defaultZone: http://10.3.1.187:8761/eureka/
    
# Define settings for Single-Sign-On with OAuth2; this means that we need to relay the OAuth token 
# to the subsequent resources that are proxied by the Zuul api gateway.

# The home definition tells us to allow anonymous access (secure: false) to the static resources that
# are accessed through the Zuul proxy.

# Remaining properties are used by the OAuth2 SSO to determine where the authorization server is and
# what client crendentials to use to access that server.
spring:
  oauth2:
    sso:
      home:
        secure: false
        path: /common/**
    client:
      accessTokenUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token
      userAuthorizationUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/authorize
      clientId: clientapp
      clientSecret: 123456a
# The userInfoUri is used to authenticate the user so that SSO token can be relayed forward. It needs to either be
# a physical endpoint (defined using userInfoUri) OR can be bypassed if you use a JSON web token (JWT) that stores
# information about grants and authentication in the token itself.

# Note that the "/user" endpoint needs to provide the principle of the logged in user (/me endpoint)
    resource: 
      userInfoUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/me
      preferTokenInfo: false 
    
# Datasource and JPA configuration to be used for using the same tokenstore as the authorization server for
# the defined resource server. Note that there can't be 2 different root nodes, so datasource falls under the "spring" node.
  datasource:
    url: jdbc:mysql://10.3.2.212:3306/core_indiana_oauth2
    username: testuser
    password: test13!Wkv
    driver-class: com.mysql.jdbc.Driver
  
  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    show-sql: true
    hibernate:
      ddl-auto: update
